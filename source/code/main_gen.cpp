#include "apmatgen.hpp"
#include <iostream>

/* Main file for the APGen generator. Documentation can be generated using
doxygen together with pdflatex. See the doxygen folder for further details. */


/** \mainpage Documentation for the APGen program.

\latexonly

\newcommand{\code}[1]{\texttt{\small #1}}

\title{APGen - The assignment problem generator}

\author{
{\sc Lars Relund Nielsen\thanks{Corresponding author, e-mail: lars@relund.dk.}} \\
{\small Department of Accounting, Finance and Logistics}\\
{\small Aarhus School of Business}\\
{\small Fuglesangs Allé 4}\\
{\small DK-8210 Aarhus V}\\
{\small Denmark}
\and
{\sc Christian Roed Pedersen\thanks{e-mail: roed@imf.au.dk.}}\\
{\small Department of Operations Research}\\
{\small University of Aarhus}\\
{\small Ny Munkegade, Building 1530}\\
{\small 8000 Aarhus C}\\
{\small Denmark} }

\date{Version 2.0 - Dec. 2005}

\maketitle
%% --------------------------------------------------------------------- %%
%% Abstract and Keywords
\begin{abstract}
This manual provide documentation for the \emph{Assignment Problem Generator}
(\emph{APGen}) which generate problem instances for the bicriterion assignment
problem. Also instances for the bicriterion multi modal assignment problem can
be generated. The instance generated will be output as an xml file which may
be converted to a desired format using an xslt stylesheet. Instances for
similar single criterion problems can also be generated by e.g. only
considering the first criterion.

\vskip 0.3cm

{\em Keywords:} Linear assignment problem, testing, generator.
\end{abstract}
%% --------------------------------------------------------------------- %%

\pagenumbering{roman}

\tableofcontents

\pagenumbering{arabic}

\section{Introduction}

This manual provide documentation for the \emph{Assignment Problem Generator}
(\emph{APGen}) which generate problem instances for the bicriterion
assignment problem (BiAP). Also instances for the bicriterion multi modal
assignment problem can be generated (BiMMAP). For a short introduction to
BiAP and BiMMAP see \Fref{apdx:apdef}. An instance generated will be output as
an xml file which may be converted to a desired format using an xslt
stylesheet. For an introduction to xml and xslt see \citet{Moller06}.

The APGen generator has been used to generate instances for testing in e.g.
\citet{Pedersen05,Pedersen05b}.

\newcommand{\moreh}[1][1cm]{\rule[-7mm]{0pt}{#1}}
\begin{figure}[tp]
\begin{center}
\begin{tabular}{c|c|c|}
row $\backslash$ column & 0 & 1\\
\hline 0 & \moreh[1.4cm] ${\setlength{\arraycolsep}{0pt}
\begin{pmatrix}547\\532\end{pmatrix}}$ &
$\begin{pmatrix}138\\777\end{pmatrix} \enskip
\begin{pmatrix}357\\721\end{pmatrix} \enskip
\begin{pmatrix}594\\462\end{pmatrix} \enskip
\begin{pmatrix}840\\272\end{pmatrix}$ \\
\hline 1 & \moreh[1.4cm]
$\begin{pmatrix}113\\828\end{pmatrix} \enskip
\begin{pmatrix}178\\732\end{pmatrix} \enskip
\begin{pmatrix}493\\408\end{pmatrix} \enskip
\begin{pmatrix}752\\219\end{pmatrix}$ &
$ \begin{pmatrix}85\\320\end{pmatrix}$\\
\hline
\end{tabular}
\end{center}
\caption{An example of the assignment cost matrix $(n=2)$.} \label{fig:apmat}
\end{figure}

The underlying data structure used is an \emph{assignment cost matrix} as
shown in \Fref{fig:apmat}. Given the \emph{dimension} $n$ of the assignment
problem, we consider a matrix with $n$ rows and columns numbered {0,\dots,$n-1$}.
For a fixed row $i$ and column $j$ we consider a given \emph{cell} containing a set of
$L_{ij}$ \emph{entries}, namely, the set of bicriterion costs
$(c_{ij1}^1,c_{ij1}^2),\dots,(c_{ijL_{ij}}^1,c_{ijL_{ij}}^2)$.

The documentation is ordered as follows. The program parameters are given in
\Fref{sec:para} and output is described in \Fref{sec:output}. The remaining
section describe the public members for the generator class in the class
library, which are available on request. Finally, \Fref{apdx:apdef} gives a
short introduction to BiAP and BiMMAP.


\section{Program parameters} \label{sec:para}

The program uses command line passing for catching a number of run directives.
The following flags/options can be used:

\begin{description}

\item[-\code{dim}] Dimension $n$ of problem instance to be generated (compulsory).

\item[-\code{maxEnt}] Upper bound for entry range (compulsory).

\item[-\code{minEnt}] Lower bound for entry range (optional - default is one).
This entry must of course not be larger than \code{maxEnt}.

\item[-\code{maxCost}] Upper bound for cost range (compulsory), i.e. costs are
generated in $\{0,\dots,\code{maxCost}\}$. Observe that \code{maxCost} must be
chosen sufficiently large ($\geq \code{maxEnt}-1$).

\item[-\code{method}] The method used for generating costs (see \Fref{sec:methods}).

\item[-\code{shape}] The shape parameter. Possible values depend on which method is used (see \Fref{sec:methods}).

\item[-\code{out}] Output file name without xml extension (compulsory).

\item[-\code{seed}] The seed (if not specified generate one randomly).
\end{description}

All parameters are given as integers except \code{out}. Example:

\texttt{\small apgen -dim 8 -maxEnt 15 -minEnt 10 -maxCost 1000 -out apmat
-seed 23413 -method 1 -shape 10}

\begin{figure}[tbp]
  \centering
  \includegraphics[width=0.45\linewidth]{graphic/genMaxE1S0}
  \includegraphics[width=0.45\linewidth]{graphic/genMaxE1S1}
  \caption{BiAP instance - Costs for all cells using $\code{shape}=0$ (left) and $\code{shape}=1$ (right).}
  \label{fig:BiAP}
\end{figure}

\begin{figure}[tbp]
\begin{boxedminipage}{\linewidth}
\begin{alltt}\small
<?xml version="1.0" encoding="ISO-8859-1"?> <!--Cost matrix for the
bicriterion (multi modal)
 assignment problem generated using APGen.
 Lars Relund Nielsen and Christian Roed Pedersen (c)-->
<apmat dimension="2" version="2.0" costrange="0-1000"
   entryrange="1-4" method="1" shape="0" seed="234213">
    <cell row="0" column="0" entries="1">
        <entry c1="547" c2="532"/>
    </cell>
    <cell row="0" column="1" entries="4">
        <entry c1="138" c2="777"/>
        <entry c1="357" c2="721"/>
        <entry c1="594" c2="462"/>
        <entry c1="840" c2="272"/>
    </cell>
    <cell row="1" column="0" entries="4">
        <entry c1="113" c2="828"/>
        <entry c1="178" c2="732"/>
        <entry c1="493" c2="408"/>
        <entry c1="752" c2="219"/>
    </cell>
    <cell row="1" column="1" entries="1">
        <entry c1="85" c2="320"/>
    </cell>
</apmat>
\end{alltt}
\end{boxedminipage}
  \caption{The xml output file.}
  \label{fig:xml}
\end{figure}


\subsection{Possible methods and shapes}
\label{sec:methods}

Cost are generated differently depending on whether
we generate instances for BiAP or BiMMAP. If BiAP is considered,
then $\code{maxEnt}=1$ and \code{shape} define the correlation between the
costs. If $\code{shape}=0$, costs are generated randomly in
$\{0,\dots,\code{maxCost}\}$, and if $\code{shape}=1$, costs $(c^1,c^2)$ are
generated negatively correlated as follows

\begin{align*}
c^{1} & <\frac{\code{maxCost}}{2}\Rightarrow c^{2} \in\left\{
\code{maxCost}-c^{1} ,\dots,\code{maxCost}\right\} \\
c^{1} &  \geq\frac{\code{maxCost}}{2}\Rightarrow c^{2} \in\left\{ 0,\dots,
\code{maxCost}-c^{1} \right\}
\end{align*}

Plots of the costs in all cells of a BiAP instance of size $n=50$ using shape
0 and 1 are given in \Fref{fig:BiAP}. The \code{method} parameter have no
effect if we consider BiAP instances.

If we consider BiMMAP, costs can be generated using 3 different methods. If
$\code{method}=1$, the $\code{shape}\in \{-100,\dots,100\}$ parameter
describes the curve of the function along which the entries are generated. A
negative shape corresponds to generating the entries along a concave-like
function, using shape 0 generates entries fluctuating along a straight line,
and finally, a positive shape means generating entries along a convex-like
function. Some plots of the cell cost vectors for instances generated using
$\code{method}=1$ and different shapes are given in Figures
\ref{fig:M1S0}-\ref{fig:M1S60} ($n=2$). Note, using negative shapes, in
general, generate many unsupported nondominated cost vectors for each cell,
while positive shapes generate many extreme supported nondominated cost
vectors for each cell.

If $\code{method}=2$, the cost interval is split into $2\cdot$\code{shape}
intervals and costs are generated in intervals $1,3,5,\dots,\code{shape}-1$.
This method can be used to generate costs in groups. Note, the number of
groups is equal to \code{shape}, and we assume that $\code{shape}\in
\{1,\dots, \lfloor \code{maxEnt}/2 \rfloor\}$. Some plots of the cell costs
for instances generated using $\code{method}=2$ and shapes 3 and 4 are given
in Figures \ref{fig:M2S3}-\ref{fig:M2S4} ($n=2$).

If $\code{method}=3$, the two-dimensional cost interval is split into four
equally sized regions. Assuming that the cells are numbered from 1 to $n^2$
(row-wise numbering) then the cost vectors in the cells $1,3, \dots$ are
generated using the upper/left cost region, and cost vectors in the cells
$2,4,\dots$ are generated using the lower/right cost region. That is, the
costs differ from cell to cell as shown in \Fref{fig:M3S0} ($n=2$). The
\code{shape} parameter is defined as for $\code{method}=1$.


\section{Output} \label{sec:output}

Output is written to $<$filename$>$.xml where $<$filename$>$ is the filename
specified by \code{out}. The xml format is simple to understand and
illustrated in \Fref{fig:xml} which is the corresponding xml file to the
assignment cost matrix in \Fref{fig:apmat}. Note, in general, the xml format
is very verbose resulting in large file sizes. However, the xml file may be
converted to a desired format using an xslt stylesheet.

\begin{figure}[tbp]
  \centering
  \includegraphics[width=0.7\linewidth]{graphic/genM1S0}
  \caption{Costs in the different cells for an instance generated with dimension=2, $\code{method}=1$ and $\code{shape}=0$.}
  \label{fig:M1S0}
\end{figure}

\begin{figure}[tbp]
  \centering
  \includegraphics[height=0.4\textheight]{graphic/genM1S-60}
  \caption{Costs in the different cells for an instance generated with dimension=2, $\code{method}=1$ and $\code{shape}=-60$.}
  \label{fig:M1S-60}
\end{figure}

\begin{figure}[tbp]
  \centering
  \includegraphics[height=0.4\textheight]{graphic/genM1S60}
  \caption{Costs in the different cells for an instance generated with dimension=2, $\code{method}=1$ and $\code{shape}=60$.}
  \label{fig:M1S60}
\end{figure}

\begin{figure}[tbp]
  \centering
  \includegraphics[height=0.4\textheight]{graphic/genM2S3}
  \caption{Costs in the different cells for an instance generated with dimension=2, $\code{method}=2$ and $\code{shape}=3$.}
  \label{fig:M2S3}
\end{figure}

\begin{figure}[tbp]
  \centering
  \includegraphics[height=0.4\textheight]{graphic/genM2S4}
  \caption{Costs in the different cells for an instance generated with dimension=2, $\code{method}=2$ and $\code{shape}=4$.}
  \label{fig:M2S4}
\end{figure}

\begin{figure}[tbp]
  \centering
  \includegraphics[height=0.4\textheight]{graphic/genM3S0}
  \caption{Costs in the different cells for an instance generated with dimension=2, $\code{method}=3$ and $\code{shape}=0$.}
  \label{fig:M3S0}
\end{figure}

\endlatexonly

\htmlonly

\section log Change log

Lars Relund Nielsen (lrn) and Christian Roed Petersen (crp).

\li 30-11-2005: Updated documentation (lrn).
\li 29-11-2005: Updated to version 2.0 which can generate negatively correlated cost for the BiAP (maxEnt=1) (lrn).
\li 27-06-2005: Finished first version (v1.0) which can generate using 3 methods (lrn).
\li 24-06-2005: Made changes such that different shapes of the NDPs in a cell can be specified (lrn).
\li 23-06-2005: Finished the first version of the generator (lrn).
\li 23-06-2005: Started to perform major changes for the generator (crp).
\li 17-06-2005: Altering the generator (crp).
\li 06-05-2005: Setting up a file for generating BiMMAP instances (crp)

\author Lars Relund Nielsen and Christian Roed Pedersen.
\version 2.0

\endhtmlonly

*/

//----------------------------------------------------------------------------

// Input for main function see error output in main
int main(int argc,char **argv)
{
    char out[150]="";
    int i;
    int dim = 0;
    int minEntries = 1;
    int maxEntries = 0;
    int maxCost = 0;
    int seed = 0;
    int shape = 0;
    int method = 1;

    i = 1;

    while (i < argc)
    {
        if (!strcmp(argv[i],"-dim"))
            dim = atoi(argv[++i]);
        if (!strcmp(argv[i],"-minEnt"))
            minEntries = atoi(argv[++i]);
        if (!strcmp(argv[i],"-maxEnt"))
            maxEntries = atoi(argv[++i]);
        if (!strcmp(argv[i],"-maxCost"))
            maxCost = atoi(argv[++i]);
        if (!strcmp(argv[i],"-out"))
            strcpy(out,argv[++i]);
        if (!strcmp(argv[i],"-seed"))
            seed = atoi(argv[++i]);
        if (!strcmp(argv[i],"-shape"))
            shape = atoi(argv[++i]);
        if (!strcmp(argv[i],"-method"))
            method = atoi(argv[++i]);
        i++;
    }

    APMatGen oGen;
    oGen.SetValues(out,dim,minEntries,maxEntries,maxCost,seed,shape,method);
    oGen.Generate();
    return(0);
}

//----------------------------------------------------------------------------
